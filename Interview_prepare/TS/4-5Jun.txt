interface

interface LabeledValue {
    label: string;
}

function printLabel(labeledObj: LabeledValue) {
    console.log(labeledObj.label);
}


2. 
interface SquareConfig {
    color?: string;
    width?: number;
}

function createSquare(config: SquareConfig): {color: string; area: number} {
    let newSquare = {color: "white", area: 100};
    if (config.color) {
        newSquare.color = config.color;
    }
    if (config.width) {
        newSquare.area = config.width * config.width;
    }
    return newSquare;
}

3. 
readonly vs const #
The easiest way to remember whether to use readonly or const is to ask whether you’re using it on a variable or a property. Variables use const whereas properties use readonly.

Excess Property Checks #
In our first example using interfaces, TypeScript lets us pass { size: number; 
label: string; } to something that only expected a { label: string; }. 
We also just learned about optional properties, 
and how they’re useful when describing so-called “option bags”.

4. 
interface SquareConfig {
    color?: string;
    width?: number;
    [propName: string]: any;
}
Optionalal

NOTE:--
However, TypeScript takes the stance that there’s probably a bug in this code. 
Object literals get special treatment and undergo excess property checking when assigning them to other variables,
 or passing them as arguments. If an object literal has any properties that the “target type” doesn’t have, you’ll get an error:



5. Function Types

6. Indexable Types 

7. Class Types

8. Extending Interfaces

9. Hybrid Types

10. Interfaces Extending Classes
